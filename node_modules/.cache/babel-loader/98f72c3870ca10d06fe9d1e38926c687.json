{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\91823\\\\OneDrive\\\\Desktop\\\\Micromouse AI Assignment\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"C:\\\\Users\\\\91823\\\\OneDrive\\\\Desktop\\\\Micromouse AI Assignment\\\\src\\\\Micro mouse\\\\Micromouse.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra } from './dijkstra';\nimport './Micromouse.css';\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n\n    this.getInitialGrid = (rowCount = this.state.ROW_COUNT, colCount = this.state.COLUMN_COUNT) => {\n      const initialGrid = [];\n\n      for (let row = 0; row < rowCount; row++) {\n        const currentRow = [];\n\n        for (let col = 0; col < colCount; col++) {\n          currentRow.push(this.createNode(row, col));\n        }\n\n        initialGrid.push(currentRow);\n      }\n\n      return initialGrid;\n    };\n\n    this.createNode = (row, col) => {\n      const prob = Math.floor(Math.random() * 11);\n\n      if (prob < 2 && (row !== this.state.START_NODE_ROW || row !== this.state.FINISH_NODE_ROW) && (col !== this.state.START_NODE_COL || col !== this.state.FINISH_NODE_COL)) {\n        return {\n          row,\n          col,\n          isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n          isFinish: row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\n          distance: Infinity,\n          distanceToFinishNode: Math.abs(this.state.FINISH_NODE_ROW - row) + Math.abs(this.state.FINISH_NODE_COL - col),\n          isVisited: false,\n          isWall: true,\n          previousNode: null,\n          isNode: true\n        };\n      }\n\n      return {\n        row,\n        col,\n        isStart: row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\n        isFinish: row === this.state.FINISH_NODE_ROW && col === this.state.FINISH_NODE_COL,\n        distance: Infinity,\n        distanceToFinishNode: Math.abs(this.state.FINISH_NODE_ROW - row) + Math.abs(this.state.FINISH_NODE_COL - col),\n        isVisited: false,\n        isWall: false,\n        previousNode: null,\n        isNode: true\n      };\n    };\n\n    this.state = {\n      grid: [],\n      START_NODE_ROW: Math.floor(Math.random() * 25),\n      FINISH_NODE_ROW: Math.floor(Math.random() * 25),\n      START_NODE_COL: Math.floor(Math.random() * 35),\n      FINISH_NODE_COL: Math.floor(Math.random() * 35),\n      mouseIsPressed: false,\n      ROW_COUNT: 25,\n      COLUMN_COUNT: 35,\n      isRunning: false,\n      isStartNode: false,\n      isFinishNode: false,\n      isWallNode: false,\n      // xxxxxxx\n      currRow: 0,\n      currCol: 0\n    };\n    this.handleMouseDown = this.handleMouseDown.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\n    this.changedim = this.changedim.bind(this);\n  }\n\n  componentDidMount() {\n    const grid = this.getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  toggleIsRunning() {\n    this.setState({\n      isRunning: !this.state.isRunning\n    });\n  }\n  /******************** Set up the initial grid ********************/\n\n\n  /******************** Control mouse events ********************/\n  handleMouseDown(row, col) {\n    if (!this.state.isRunning) {\n      if (this.isGridClear()) {\n        if (document.getElementById(\"node-\".concat(row, \"-\").concat(col)).className === 'node node-start') {\n          this.setState({\n            mouseIsPressed: true,\n            isStartNode: true,\n            currRow: row,\n            currCol: col\n          });\n        } else if (document.getElementById(\"node-\".concat(row, \"-\").concat(col)).className === 'node node-finish') {\n          this.setState({\n            mouseIsPressed: true,\n            isFinishNode: true,\n            currRow: row,\n            currCol: col\n          });\n        } else {\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid,\n            mouseIsPressed: true,\n            isWallNode: true,\n            currRow: row,\n            currCol: col\n          });\n        }\n      } else {\n        this.clearGrid();\n      }\n    }\n  }\n\n  isGridClear() {\n    for (const row of this.state.grid) {\n      for (const node of row) {\n        const nodeClassName = document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className;\n\n        if (nodeClassName === 'node node-visited' || nodeClassName === 'node node-shortest-path') {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.isRunning) {\n      if (this.state.mouseIsPressed) {\n        const nodeClassName = document.getElementById(\"node-\".concat(row, \"-\").concat(col)).className;\n\n        if (this.state.isStartNode) {\n          if (nodeClassName !== 'node node-wall') {\n            const prevStartNode = this.state.grid[this.state.currRow][this.state.currCol];\n            prevStartNode.isStart = false;\n            document.getElementById(\"node-\".concat(this.state.currRow, \"-\").concat(this.state.currCol)).className = 'node';\n            this.setState({\n              currRow: row,\n              currCol: col\n            });\n            const currStartNode = this.state.grid[row][col];\n            currStartNode.isStart = true;\n            document.getElementById(\"node-\".concat(row, \"-\").concat(col)).className = 'node node-start';\n          }\n\n          this.setState({\n            START_NODE_ROW: row,\n            START_NODE_COL: col\n          });\n        } else if (this.state.isFinishNode) {\n          if (nodeClassName !== 'node node-wall') {\n            const prevFinishNode = this.state.grid[this.state.currRow][this.state.currCol];\n            prevFinishNode.isFinish = false;\n            document.getElementById(\"node-\".concat(this.state.currRow, \"-\").concat(this.state.currCol)).className = 'node';\n            this.setState({\n              currRow: row,\n              currCol: col\n            });\n            const currFinishNode = this.state.grid[row][col];\n            currFinishNode.isFinish = true;\n            document.getElementById(\"node-\".concat(row, \"-\").concat(col)).className = 'node node-finish';\n          }\n\n          this.setState({\n            FINISH_NODE_ROW: row,\n            FINISH_NODE_COL: col\n          });\n        } else if (this.state.isWallNode) {\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n          this.setState({\n            grid: newGrid\n          });\n        }\n      }\n    }\n  }\n\n  handleMouseUp(row, col) {\n    if (!this.state.isRunning) {\n      this.setState({\n        mouseIsPressed: false\n      });\n\n      if (this.state.isStartNode) {\n        const isStartNode = !this.state.isStartNode;\n        this.setState({\n          isStartNode,\n          START_NODE_ROW: row,\n          START_NODE_COL: col\n        });\n      } else if (this.state.isFinishNode) {\n        const isFinishNode = !this.state.isFinishNode;\n        this.setState({\n          isFinishNode,\n          FINISH_NODE_ROW: row,\n          FINISH_NODE_COL: col\n        });\n      }\n\n      this.getInitialGrid();\n    }\n  }\n\n  handleMouseLeave() {\n    if (this.state.isStartNode) {\n      const isStartNode = !this.state.isStartNode;\n      this.setState({\n        isStartNode,\n        mouseIsPressed: false\n      });\n    } else if (this.state.isFinishNode) {\n      const isFinishNode = !this.state.isFinishNode;\n      this.setState({\n        isFinishNode,\n        mouseIsPressed: false\n      });\n    } else if (this.state.isWallNode) {\n      const isWallNode = !this.state.isWallNode;\n      this.setState({\n        isWallNode,\n        mouseIsPressed: false\n      });\n      this.getInitialGrid();\n    }\n  }\n  /******************** Clear Board/Walls ********************/\n\n\n  clearGrid() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className;\n\n          if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish' && nodeClassName !== 'node node-wall') {\n            document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node';\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = Math.abs(this.state.FINISH_NODE_ROW - node.row) + Math.abs(this.state.FINISH_NODE_COL - node.col);\n          }\n\n          if (nodeClassName === 'node node-finish') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = 0;\n          }\n\n          if (nodeClassName === 'node node-start') {\n            node.isVisited = false;\n            node.distance = Infinity;\n            node.distanceToFinishNode = Math.abs(this.state.FINISH_NODE_ROW - node.row) + Math.abs(this.state.FINISH_NODE_COL - node.col);\n            node.isStart = true;\n            node.isWall = false;\n            node.previousNode = null;\n            node.isNode = true;\n          }\n        }\n      }\n    }\n  }\n\n  clearWalls() {\n    if (!this.state.isRunning) {\n      const newGrid = this.state.grid.slice();\n\n      for (const row of newGrid) {\n        for (const node of row) {\n          let nodeClassName = document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className;\n\n          if (nodeClassName === 'node node-wall') {\n            document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node';\n            node.isWall = false;\n          }\n        }\n      }\n    }\n  }\n  /******************** Create Animations ********************/\n\n\n  visualize() {\n    if (!this.state.isRunning) {\n      this.clearGrid();\n      this.toggleIsRunning();\n      const grid = this.state.grid;\n      const startNode = grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\n      const finishNode = grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\n      let visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n      nodesInShortestPathOrder.push('end');\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\n    }\n  }\n\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        const nodeClassName = document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className;\n\n        if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish') {\n          document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-visited';\n        }\n      }, 10 * i);\n    }\n  }\n  /******************** Create path from start to finish ********************/\n\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      if (nodesInShortestPathOrder[i] === 'end') {\n        setTimeout(() => {\n          this.toggleIsRunning();\n        }, i * 50);\n      } else {\n        setTimeout(() => {\n          const node = nodesInShortestPathOrder[i];\n          const nodeClassName = document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className;\n\n          if (nodeClassName !== 'node node-start' && nodeClassName !== 'node node-finish') {\n            document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-shortest-path';\n          }\n        }, i * 40);\n      }\n    }\n  }\n  /******************** Change Dimensions ********************/\n\n\n  changedim() {\n    const ROW_COUNT = Number(document.getElementById('row_i').value);\n    const COLUMN_COUNT = Number(document.getElementById('col_i').value);\n    const START_NODE_ROW = Math.floor(Math.random() * ROW_COUNT);\n    const FINISH_NODE_ROW = Math.floor(Math.random() * ROW_COUNT);\n    const START_NODE_COL = Math.floor(Math.random() * COLUMN_COUNT);\n    const FINISH_NODE_COL = Math.floor(Math.random() * COLUMN_COUNT);\n    this.setState({\n      COLUMN_COUNT,\n      ROW_COUNT,\n      START_NODE_ROW,\n      FINISH_NODE_ROW,\n      START_NODE_COL,\n      FINISH_NODE_COL\n    }, () => {\n      const grid = this.getInitialGrid();\n      this.setState({\n        grid\n      });\n    });\n    console.log(this.state);\n  }\n\n  render() {\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          mouseIsPressed = _this$state.mouseIsPressed;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: \"grid-container\",\n      onMouseLeave: () => this.handleMouseLeave(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 385\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, grid.map((row, rowIdx) => {\n      return React.createElement(\"tr\", {\n        key: rowIdx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 391\n        },\n        __self: this\n      }, row.map((node, nodeIdx) => {\n        const row = node.row,\n              col = node.col,\n              isFinish = node.isFinish,\n              isStart = node.isStart,\n              isWall = node.isWall,\n              distanceToFinishNode = node.distanceToFinishNode;\n        return React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(row, col),\n          row: row,\n          distanceToFinishNode: distanceToFinishNode,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 395\n          },\n          __self: this\n        });\n      }));\n    }))), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420\n      },\n      __self: this\n    }, \"Rows\"), React.createElement(\"input\", {\n      type: \"number\",\n      id: \"row_i\",\n      name: \"row_i\",\n      defaultValue: this.state.ROW_COUNT,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, \"Columns\"), React.createElement(\"input\", {\n      type: \"number\",\n      id: \"col_i\",\n      name: \"col_i\",\n      defaultValue: this.state.COLUMN_COUNT,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-danger\",\n      onClick: () => this.clearGrid(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, \"Clear Grid\"), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-warning\",\n      onClick: () => this.clearWalls(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 431\n      },\n      __self: this\n    }, \"Clear Walls\"), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: () => this.visualize(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, \"Search\"), React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn btn-primary\",\n      onClick: () => this.changedim(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 443\n      },\n      __self: this\n    }, \"Change Dimension\")));\n  }\n\n}\n/******************** Create Walls ********************/\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n\n  if (!node.isStart && !node.isFinish && node.isNode) {\n    const newNode = _objectSpread({}, node, {\n      isWall: !node.isWall\n    });\n\n    newGrid[row][col] = newNode;\n  }\n\n  return newGrid;\n}; // Backtracks from the finishNode to find the shortest path.\n// Only works when called after the pathfinding methods.\n\n\nfunction getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n\n  return nodesInShortestPathOrder;\n}","map":{"version":3,"sources":["C:\\Users\\91823\\OneDrive\\Desktop\\Micromouse AI Assignment\\src\\Micro mouse\\Micromouse.jsx"],"names":["React","Component","Node","dijkstra","PathfindingVisualizer","constructor","getInitialGrid","rowCount","state","ROW_COUNT","colCount","COLUMN_COUNT","initialGrid","row","currentRow","col","push","createNode","prob","Math","floor","random","START_NODE_ROW","FINISH_NODE_ROW","START_NODE_COL","FINISH_NODE_COL","isStart","isFinish","distance","Infinity","distanceToFinishNode","abs","isVisited","isWall","previousNode","isNode","grid","mouseIsPressed","isRunning","isStartNode","isFinishNode","isWallNode","currRow","currCol","handleMouseDown","bind","handleMouseLeave","toggleIsRunning","changedim","componentDidMount","setState","isGridClear","document","getElementById","className","newGrid","getNewGridWithWallToggled","clearGrid","node","nodeClassName","handleMouseEnter","prevStartNode","currStartNode","prevFinishNode","currFinishNode","handleMouseUp","slice","clearWalls","visualize","startNode","finishNode","visitedNodesInOrder","nodesInShortestPathOrder","getNodesInShortestPathOrder","animate","i","length","setTimeout","animateShortestPath","Number","value","console","log","render","map","rowIdx","nodeIdx","newNode","currentNode","unshift"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra} from './dijkstra';\r\n\r\nimport './Micromouse.css';\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      START_NODE_ROW: Math.floor(Math.random() * 25),\r\n      FINISH_NODE_ROW: Math.floor(Math.random() * 25),\r\n      START_NODE_COL: Math.floor(Math.random() * 35),\r\n      FINISH_NODE_COL: Math.floor(Math.random() * 35),\r\n      mouseIsPressed: false,\r\n      ROW_COUNT: 25,\r\n      COLUMN_COUNT: 35,\r\n      isRunning: false,\r\n      isStartNode: false,\r\n      isFinishNode: false,\r\n      isWallNode: false, // xxxxxxx\r\n      currRow: 0,\r\n      currCol: 0,\r\n    };\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\r\n    this.toggleIsRunning = this.toggleIsRunning.bind(this);\r\n    this.changedim = this.changedim.bind(this);\r\n  }\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    const grid = this.getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  toggleIsRunning() {\r\n    this.setState({isRunning: !this.state.isRunning});\r\n  }\r\n\r\n  /******************** Set up the initial grid ********************/\r\n  getInitialGrid = (\r\n    rowCount = this.state.ROW_COUNT,\r\n    colCount = this.state.COLUMN_COUNT,\r\n  ) => {\r\n    const initialGrid = [];\r\n    for (let row = 0; row < rowCount; row++) {\r\n      const currentRow = [];\r\n      for (let col = 0; col < colCount; col++) {\r\n        currentRow.push(this.createNode(row, col));\r\n      }\r\n      initialGrid.push(currentRow);\r\n    }\r\n    return initialGrid;\r\n  };\r\n\r\n  createNode = (row, col) => {\r\n    const prob = Math.floor(Math.random() * 11)\r\n    if(prob<2 && (row !== this.state.START_NODE_ROW || row !== this.state.FINISH_NODE_ROW) && (col !== this.state.START_NODE_COL || col !== this.state.FINISH_NODE_COL)){\r\n      return {\r\n        row,\r\n        col,\r\n        isStart:\r\n          row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n        isFinish:\r\n          row === this.state.FINISH_NODE_ROW &&\r\n          col === this.state.FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        distanceToFinishNode:\r\n          Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n          Math.abs(this.state.FINISH_NODE_COL - col),\r\n        isVisited: false,\r\n        isWall: true,\r\n        previousNode: null,\r\n        isNode: true,\r\n      };\r\n    }\r\n    return {\r\n      row,\r\n      col,\r\n      isStart:\r\n        row === this.state.START_NODE_ROW && col === this.state.START_NODE_COL,\r\n      isFinish:\r\n        row === this.state.FINISH_NODE_ROW &&\r\n        col === this.state.FINISH_NODE_COL,\r\n      distance: Infinity,\r\n      distanceToFinishNode:\r\n        Math.abs(this.state.FINISH_NODE_ROW - row) +\r\n        Math.abs(this.state.FINISH_NODE_COL - col),\r\n      isVisited: false,\r\n      isWall: false,\r\n      previousNode: null,\r\n      isNode: true,\r\n    };\r\n  };\r\n\r\n  /******************** Control mouse events ********************/\r\n  handleMouseDown(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.isGridClear()) {\r\n        if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-start'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isStartNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else if (\r\n          document.getElementById(`node-${row}-${col}`).className ===\r\n          'node node-finish'\r\n        ) {\r\n          this.setState({\r\n            mouseIsPressed: true,\r\n            isFinishNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        } else {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({\r\n            grid: newGrid,\r\n            mouseIsPressed: true,\r\n            isWallNode: true,\r\n            currRow: row,\r\n            currCol: col,\r\n          });\r\n        }\r\n      } else {\r\n        this.clearGrid();\r\n      }\r\n    }\r\n  }\r\n\r\n  isGridClear() {\r\n    for (const row of this.state.grid) {\r\n      for (const node of row) {\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName === 'node node-visited' ||\r\n          nodeClassName === 'node node-shortest-path'\r\n        ) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.isRunning) {\r\n      if (this.state.mouseIsPressed) {\r\n        const nodeClassName = document.getElementById(`node-${row}-${col}`)\r\n          .className;\r\n        if (this.state.isStartNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevStartNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevStartNode.isStart = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currStartNode = this.state.grid[row][col];\r\n            currStartNode.isStart = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-start';\r\n          }\r\n          this.setState({START_NODE_ROW: row, START_NODE_COL: col});\r\n        } else if (this.state.isFinishNode) {\r\n          if (nodeClassName !== 'node node-wall') {\r\n            const prevFinishNode = this.state.grid[this.state.currRow][\r\n              this.state.currCol\r\n            ];\r\n            prevFinishNode.isFinish = false;\r\n            document.getElementById(\r\n              `node-${this.state.currRow}-${this.state.currCol}`,\r\n            ).className = 'node';\r\n\r\n            this.setState({currRow: row, currCol: col});\r\n            const currFinishNode = this.state.grid[row][col];\r\n            currFinishNode.isFinish = true;\r\n            document.getElementById(`node-${row}-${col}`).className =\r\n              'node node-finish';\r\n          }\r\n          this.setState({FINISH_NODE_ROW: row, FINISH_NODE_COL: col});\r\n        } else if (this.state.isWallNode) {\r\n          const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n          this.setState({grid: newGrid});\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    if (!this.state.isRunning) {\r\n      this.setState({mouseIsPressed: false});\r\n      if (this.state.isStartNode) {\r\n        const isStartNode = !this.state.isStartNode;\r\n        this.setState({isStartNode, START_NODE_ROW: row, START_NODE_COL: col});\r\n      } else if (this.state.isFinishNode) {\r\n        const isFinishNode = !this.state.isFinishNode;\r\n        this.setState({\r\n          isFinishNode,\r\n          FINISH_NODE_ROW: row,\r\n          FINISH_NODE_COL: col,\r\n        });\r\n      }\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  handleMouseLeave() {\r\n    if (this.state.isStartNode) {\r\n      const isStartNode = !this.state.isStartNode;\r\n      this.setState({isStartNode, mouseIsPressed: false});\r\n    } else if (this.state.isFinishNode) {\r\n      const isFinishNode = !this.state.isFinishNode;\r\n      this.setState({isFinishNode, mouseIsPressed: false});\r\n    } else if (this.state.isWallNode) {\r\n      const isWallNode = !this.state.isWallNode;\r\n      this.setState({isWallNode, mouseIsPressed: false});\r\n      this.getInitialGrid();\r\n    }\r\n  }\r\n\r\n  /******************** Clear Board/Walls ********************/\r\n\r\n  clearGrid() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish' &&\r\n            nodeClassName !== 'node node-wall'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n          }\r\n          if (nodeClassName === 'node node-finish') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode = 0;\r\n          }\r\n          if (nodeClassName === 'node node-start') {\r\n            node.isVisited = false;\r\n            node.distance = Infinity;\r\n            node.distanceToFinishNode =\r\n              Math.abs(this.state.FINISH_NODE_ROW - node.row) +\r\n              Math.abs(this.state.FINISH_NODE_COL - node.col);\r\n            node.isStart = true;\r\n            node.isWall = false;\r\n            node.previousNode = null;\r\n            node.isNode = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  clearWalls() {\r\n    if (!this.state.isRunning) {\r\n      const newGrid = this.state.grid.slice();\r\n      for (const row of newGrid) {\r\n        for (const node of row) {\r\n          let nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (nodeClassName === 'node node-wall') {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node';\r\n            node.isWall = false;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Create Animations ********************/\r\n  visualize() {\r\n    if (!this.state.isRunning) {\r\n      this.clearGrid();\r\n      this.toggleIsRunning();\r\n      const {grid} = this.state;\r\n      const startNode =\r\n        grid[this.state.START_NODE_ROW][this.state.START_NODE_COL];\r\n      const finishNode =\r\n        grid[this.state.FINISH_NODE_ROW][this.state.FINISH_NODE_COL];\r\n      let visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n      const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n      nodesInShortestPathOrder.push('end');\r\n      this.animate(visitedNodesInOrder, nodesInShortestPathOrder);\r\n    }\r\n  }\r\n\r\n  animate(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeClassName = document.getElementById(\r\n          `node-${node.row}-${node.col}`,\r\n        ).className;\r\n        if (\r\n          nodeClassName !== 'node node-start' &&\r\n          nodeClassName !== 'node node-finish'\r\n        ) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            'node node-visited';\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  /******************** Create path from start to finish ********************/\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      if (nodesInShortestPathOrder[i] === 'end') {\r\n        setTimeout(() => {\r\n          this.toggleIsRunning();\r\n        }, i * 50);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = nodesInShortestPathOrder[i];\r\n          const nodeClassName = document.getElementById(\r\n            `node-${node.row}-${node.col}`,\r\n          ).className;\r\n          if (\r\n            nodeClassName !== 'node node-start' &&\r\n            nodeClassName !== 'node node-finish'\r\n          ) {\r\n            document.getElementById(`node-${node.row}-${node.col}`).className =\r\n              'node node-shortest-path';\r\n          }\r\n        }, i * 40);\r\n      }\r\n    }\r\n  }\r\n\r\n  /******************** Change Dimensions ********************/\r\n\r\n  changedim() {\r\n    const ROW_COUNT = Number(document.getElementById('row_i').value);\r\n    const COLUMN_COUNT = Number(document.getElementById('col_i').value);\r\n    const START_NODE_ROW= Math.floor(Math.random() * ROW_COUNT)\r\n    const  FINISH_NODE_ROW= Math.floor(Math.random() * ROW_COUNT)\r\n    const  START_NODE_COL= Math.floor(Math.random() * COLUMN_COUNT)\r\n    const  FINISH_NODE_COL= Math.floor(Math.random() * COLUMN_COUNT)\r\n\r\n    this.setState({COLUMN_COUNT,ROW_COUNT,START_NODE_ROW,FINISH_NODE_ROW,START_NODE_COL,FINISH_NODE_COL},() => {\r\n      const grid = this.getInitialGrid();\r\n      this.setState({grid});\r\n    });\r\n    console.log(this.state);\r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n    return (\r\n      <div>\r\n        <table\r\n          className=\"grid-container\"\r\n          onMouseLeave={() => this.handleMouseLeave()}>\r\n          <tbody className=\"grid\">\r\n            {grid.map((row, rowIdx) => {\r\n              return (\r\n                <tr key={rowIdx}>\r\n                  {row.map((node, nodeIdx) => {\r\n                    const {row, col, isFinish, isStart, isWall, distanceToFinishNode} = node;\r\n                    return (\r\n                      <Node\r\n                        key={nodeIdx}\r\n                        col={col}\r\n                        isFinish={isFinish}\r\n                        isStart={isStart}\r\n                        isWall={isWall}\r\n                        mouseIsPressed={mouseIsPressed}\r\n                        onMouseDown={(row, col) =>\r\n                          this.handleMouseDown(row, col)\r\n                        }\r\n                        onMouseEnter={(row, col) =>\r\n                          this.handleMouseEnter(row, col)\r\n                        }\r\n                        onMouseUp={() => this.handleMouseUp(row, col)}\r\n                        row={row}\r\n                        distanceToFinishNode={distanceToFinishNode}\r\n                        ></Node>\r\n\r\n                    );\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n        <label>Rows</label>\r\n        <input type=\"number\" id='row_i' name='row_i' defaultValue={this.state.ROW_COUNT} ></input>\r\n        <label>Columns</label>\r\n        <input type=\"number\" id='col_i' name='col_i' defaultValue={this.state.COLUMN_COUNT}></input>\r\n        <div>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-danger\"\r\n              onClick={() => this.clearGrid()}>\r\n              Clear Grid\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-warning\"\r\n              onClick={() => this.clearWalls()}>\r\n              Clear Walls\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.visualize()}>\r\n              Search\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-primary\"\r\n              onClick={() => this.changedim()}>\r\n              Change Dimension\r\n            </button>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/******************** Create Walls ********************/\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  // mouseDown starts to act strange if I don't make newGrid and work off of grid instead.\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  if (!node.isStart && !node.isFinish && node.isNode) {\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n  }\r\n  return newGrid;\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called after the pathfinding methods.\r\nfunction getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}